# exploits/misconfig_tests.py

import aiohttp
import asyncio
import logging
from typing import List, Dict, Optional
from urllib.parse import urljoin

DEFAULT_HEADERS = {
    "User-Agent": ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                   "AppleWebKit/537.36 (KHTML, like Gecko) "
                   "Chrome/100.0.4896.127 Safari/537.36")
}

COMMON_MISCONFIG_ENDPOINTS = [
    "server-status", "phpinfo.php", "index.jsp", "default.jsp",
    "wp-admin/install.php", "install.php", "setup.php", "admin.php",
    ".env", "config.php", "config.yaml", "config.json",
    "backup.zip", "backup.tar.gz", "db.sql", "db_backup.sql",
    "config.bak", "id_rsa", "robots.txt", "sitemap.xml",
    "crossdomain.xml", "web.config", ".htaccess", "error_log",
    "logs/", "debug/", "private/", "test/", "temp/"
]

SECURITY_HEADER_CHECKS = {
    "Strict-Transport-Security": "Missing HSTS header",
    "Content-Security-Policy": "Missing Content Security Policy header",
    "X-Frame-Options": "Missing X-Frame-Options header",
    "X-Content-Type-Options": "Missing X-Content-Type-Options header",
    "Referrer-Policy": "Missing Referrer-Policy header",
    "Permissions-Policy": "Missing Permissions-Policy header",
    "Expect-CT": "Missing Expect-CT header"
}

async def fetch(session: aiohttp.ClientSession, url: str, proxy: Optional[str] = None) -> Dict:
    try:
        async with session.get(url, headers=DEFAULT_HEADERS, proxy=proxy, ssl=False) as resp:
            headers = {k.lower(): v for k, v in resp.headers.items()}
            text = await resp.text(errors="ignore")
            return {"status": resp.status, "headers": headers, "text": text, "url": str(resp.url)}
    except Exception as e:
        logging.debug(f"[MISCONFIG] Fetch error {url}: {e}")
        return {"status": 0, "headers": {}, "text": "", "url": url}

async def check_security_headers(session: aiohttp.ClientSession, url: str, proxy: Optional[str] = None) -> List[Dict]:
    result = []
    res = await fetch(session, url, proxy)
    headers = res["headers"]

    for header, message in SECURITY_HEADER_CHECKS.items():
        if header.lower() not in headers:
            result.append({"url": url, "issue": message})
    return result

async def test_sensitive_endpoints(session: aiohttp.ClientSession, base_url: str, proxy: Optional[str] = None) -> List[Dict]:
    findings = []
    for endpoint in COMMON_MISCONFIG_ENDPOINTS:
        url = urljoin(base_url, endpoint)
        try:
            async with session.get(url, headers=DEFAULT_HEADERS, proxy=proxy, ssl=False) as resp:
                text = await resp.text(errors="ignore")
                if resp.status == 200 and len(text) > 100:
                    findings.append({"url": url, "issue": "Accessible sensitive endpoint or file"})
        except Exception as e:
            logging.debug(f"[MISCONFIG] Error checking endpoint {url}: {e}")
    return findings

async def check_directory_listing(session: aiohttp.ClientSession, base_url: str, proxy: Optional[str] = None) -> List[Dict]:
    findings = []
    common_dirs = ['/', '/uploads/', '/files/', '/images/', '/backup/', '/test/']
    for directory in common_dirs:
        url = urljoin(base_url, directory)
        try:
            async with session.get(url, headers=DEFAULT_HEADERS, proxy=proxy, ssl=False) as resp:
                text = await resp.text(errors="ignore")
                if resp.status == 200 and ('Index of /' in text or 'Parent Directory' in text):
                    findings.append({"url": url, "issue": "Open directory listing enabled"})
        except Exception as e:
            logging.debug(f"[MISCONFIG] Directory listing check failed for {url}: {e}")
    return findings

async def run_misconfig_tests(base_url: str, proxy: Optional[str] = None) -> Dict[str, List[Dict]]:
    logging.info(f"[MISCONFIG] Starting misconfiguration tests on {base_url}")
    results = {"security_headers": [], "sensitive_endpoints": [], "directory_listing": []}

    async with aiohttp.ClientSession() as session:
        # Check security headers on base URL
        results["security_headers"].extend(await check_security_headers(session, base_url, proxy))

        # Test for sensitive files and endpoints
        results["sensitive_endpoints"].extend(await test_sensitive_endpoints(session, base_url, proxy))

        # Check for directory listing vulnerabilities
        results["directory_listing"].extend(await check_directory_listing(session, base_url, proxy))

    logging.info(f"[MISCONFIG] Misconfiguration tests completed")
    return results
