# exploits/parameter_discovery.py

import aiohttp
import asyncio
import logging
import re
from typing import Dict, List, Optional, Set
from urllib.parse import urljoin, urlparse, parse_qsl
from bs4 import BeautifulSoup

DEFAULT_HEADERS = {
    "User-Agent": ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                   "AppleWebKit/537.36 (KHTML, like Gecko) "
                   "Chrome/100.0.4896.127 Safari/537.36")
}

async def fetch(session: aiohttp.ClientSession, url: str, proxy: Optional[str] = None) -> Dict:
    try:
        async with session.get(url, headers=DEFAULT_HEADERS, timeout=15, proxy=proxy, ssl=False) as resp:
            text = await resp.text(errors="ignore")
            cookies = {c.key: c.value for c in resp.cookies.values()}
            base_url = str(resp.url)
            return {"html": text, "cookies": cookies, "url": base_url}
    except Exception as e:
        logging.debug(f"[PARAM DISCOV] Fetch error {url}: {e}")
        return {"html": "", "cookies": {}, "url": url}

def extract_get_params(url: str) -> Set[str]:
    parsed = urlparse(url)
    return {k for k, _ in parse_qsl(parsed.query)}

def extract_post_params(html: str) -> Set[str]:
    soup = BeautifulSoup(html, "html.parser")
    inputs = set()
    for form in soup.find_all("form"):
        for inp in form.find_all("input"):
            if name := inp.get("name"):
                inputs.add(name)
        for textarea in form.find_all("textarea"):
            if name := textarea.get("name"):
                inputs.add(name)
        for select in form.find_all("select"):
            if name := select.get("name"):
                inputs.add(name)
    return inputs

def extract_params_from_js(html: str) -> Set[str]:
    # Rudimentary JS param extraction using regex search for param-like tokens
    # For real use case, an AST or JS parser is better
    patterns = [r"(?<=\.)[a-zA-Z_][a-zA-Z0-9_]*(?=\()", r"(?:var|let|const)\s+([a-zA-Z_][a-zA-Z0-9_]*)", r"\"([a-zA-Z_][a-zA-Z0-9_]*)\""]
    params = set()
    for pattern in patterns:
        matches = re.findall(pattern, html)
        for m in matches:
            if len(m) > 2:
                params.add(m)
    return params

async def parameter_fuzzing(session: aiohttp.ClientSession, url: str, wordlist: List[str], proxy: Optional[str] = None) -> Set[str]:
    discovered: Set[str] = set()
    # For simplicity, do GET parameter fuzzing by injecting each wordlist entry as param key with an empty value
    for param in wordlist:
        test_url = urljoin(url, "?{}=".format(param))
        try:
            async with session.get(test_url, headers=DEFAULT_HEADERS, proxy=proxy, ssl=False) as resp:
                text = await resp.text(errors="ignore")
                if resp.status == 200 and "404" not in text and "not found" not in text.lower():
                    discovered.add(param)
        except Exception as e:
            logging.debug(f"[PARAM FUZZ] Error testing {test_url}: {e}")
    return discovered

async def discover_parameters(base_url: str, discovered_links: List[str], proxy: Optional[str] = None, fuzz_wordlist: Optional[List[str]] = None) -> Dict[str, Dict[str, Set[str]]]:
    logging.info(f"[PARAM DISCOV] Starting parameter discovery on {base_url}")
    param_map: Dict[str, Dict[str, Set[str]]] = {}  # url -> {get: set, post: set, cookies: set}

    async with aiohttp.ClientSession() as session:
        for url in discovered_links:
            html_resp = await fetch(session, url, proxy=proxy)
            html = html_resp["html"]
            cookies = html_resp["cookies"]

            get_params = extract_get_params(url)
            post_params = extract_post_params(html)
            js_params = extract_params_from_js(html)
            combined_params = get_params.union(post_params).union(js_params)

            # If fuzzing enabled, run fuzzing and add discovered
            if fuzz_wordlist:
                fuzz_params = await parameter_fuzzing(session, url, fuzz_wordlist, proxy=proxy)
                combined_params.update(fuzz_params)

            param_map[url] = {
                "get": get_params,
                "post": post_params,
                "js": js_params,
                "cookies": set(cookies.keys()),
                "fuzz": fuzz_wordlist if fuzz_wordlist else set(),
                "all_params": combined_params
            }
    logging.info(f"[PARAM DISCOV] Parameter discovery completed on {base_url}")
    return param_map
